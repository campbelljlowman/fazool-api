// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/campbelljlowman/fazool-api/streaming (interfaces: StreamingService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/campbelljlowman/fazool-api/graph/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStreamingService is a mock of StreamingService interface.
type MockStreamingService struct {
	ctrl     *gomock.Controller
	recorder *MockStreamingServiceMockRecorder
}

// MockStreamingServiceMockRecorder is the mock recorder for MockStreamingService.
type MockStreamingServiceMockRecorder struct {
	mock *MockStreamingService
}

// NewMockStreamingService creates a new mock instance.
func NewMockStreamingService(ctrl *gomock.Controller) *MockStreamingService {
	mock := &MockStreamingService{ctrl: ctrl}
	mock.recorder = &MockStreamingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamingService) EXPECT() *MockStreamingServiceMockRecorder {
	return m.recorder
}

// CurrentSong mocks base method.
func (m *MockStreamingService) CurrentSong() (*model.CurrentlyPlayingSong, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentSong")
	ret0, _ := ret[0].(*model.CurrentlyPlayingSong)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CurrentSong indicates an expected call of CurrentSong.
func (mr *MockStreamingServiceMockRecorder) CurrentSong() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentSong", reflect.TypeOf((*MockStreamingService)(nil).CurrentSong))
}

// GetPlaylists mocks base method.
func (m *MockStreamingService) GetPlaylists() ([]*model.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylists")
	ret0, _ := ret[0].([]*model.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylists indicates an expected call of GetPlaylists.
func (mr *MockStreamingServiceMockRecorder) GetPlaylists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylists", reflect.TypeOf((*MockStreamingService)(nil).GetPlaylists))
}

// GetSongsInPlaylist mocks base method.
func (m *MockStreamingService) GetSongsInPlaylist(arg0 string) ([]*model.SimpleSong, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongsInPlaylist", arg0)
	ret0, _ := ret[0].([]*model.SimpleSong)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongsInPlaylist indicates an expected call of GetSongsInPlaylist.
func (mr *MockStreamingServiceMockRecorder) GetSongsInPlaylist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongsInPlaylist", reflect.TypeOf((*MockStreamingService)(nil).GetSongsInPlaylist), arg0)
}

// Next mocks base method.
func (m *MockStreamingService) Next() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockStreamingServiceMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockStreamingService)(nil).Next))
}

// Pause mocks base method.
func (m *MockStreamingService) Pause() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause")
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockStreamingServiceMockRecorder) Pause() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockStreamingService)(nil).Pause))
}

// Play mocks base method.
func (m *MockStreamingService) Play() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Play")
	ret0, _ := ret[0].(error)
	return ret0
}

// Play indicates an expected call of Play.
func (mr *MockStreamingServiceMockRecorder) Play() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Play", reflect.TypeOf((*MockStreamingService)(nil).Play))
}

// QueueSong mocks base method.
func (m *MockStreamingService) QueueSong(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSong", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSong indicates an expected call of QueueSong.
func (mr *MockStreamingServiceMockRecorder) QueueSong(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSong", reflect.TypeOf((*MockStreamingService)(nil).QueueSong), arg0)
}

// Search mocks base method.
func (m *MockStreamingService) Search(arg0 string) ([]*model.SimpleSong, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].([]*model.SimpleSong)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockStreamingServiceMockRecorder) Search(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockStreamingService)(nil).Search), arg0)
}

// TimeRemaining mocks base method.
func (m *MockStreamingService) TimeRemaining() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeRemaining")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TimeRemaining indicates an expected call of TimeRemaining.
func (mr *MockStreamingServiceMockRecorder) TimeRemaining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeRemaining", reflect.TypeOf((*MockStreamingService)(nil).TimeRemaining))
}
