// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Account struct {
	ID            int     `json:"id"`
	FirstName     *string `json:"firstName"`
	LastName      *string `json:"lastName"`
	Email         *string `json:"email"`
	ActiveSession *int    `json:"activeSession"`
}

type AccountLogin struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CurrentlyPlayingSong struct {
	SimpleSong *SimpleSong `json:"simpleSong"`
	Playing    bool        `json:"playing"`
}

type NewAccount struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Password  string `json:"password"`
}

type Playlist struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Image string `json:"image"`
}

type QueuedSong struct {
	SimpleSong *SimpleSong `json:"simpleSong"`
	Votes      int         `json:"votes"`
}

type SessionConfig struct {
	ID             int `json:"id"`
	AdminAccountID int `json:"adminAccountID"`
	MaximumVoters  int `json:"maximumVoters"`
}

type SessionState struct {
	CurrentlyPlaying *CurrentlyPlayingSong `json:"currentlyPlaying"`
	Queue            []*QueuedSong         `json:"queue"`
	NumberOfVoters   int                   `json:"numberOfVoters"`
}

type SimpleSong struct {
	ID     string `json:"id"`
	Title  string `json:"title"`
	Artist string `json:"artist"`
	Image  string `json:"image"`
}

type SongUpdate struct {
	ID     string            `json:"id"`
	Title  *string           `json:"title"`
	Artist *string           `json:"artist"`
	Image  *string           `json:"image"`
	Vote   SongVoteDirection `json:"vote"`
	Action SongVoteAction    `json:"action"`
}

type SpotifyCreds struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type VoterInfo struct {
	Type           string   `json:"type"`
	SongsUpVoted   []string `json:"songsUpVoted"`
	SongsDownVoted []string `json:"songsDownVoted"`
	BonusVotes     *int     `json:"bonusVotes"`
}

type QueueAction string

const (
	QueueActionPlay    QueueAction = "PLAY"
	QueueActionPause   QueueAction = "PAUSE"
	QueueActionAdvance QueueAction = "ADVANCE"
)

var AllQueueAction = []QueueAction{
	QueueActionPlay,
	QueueActionPause,
	QueueActionAdvance,
}

func (e QueueAction) IsValid() bool {
	switch e {
	case QueueActionPlay, QueueActionPause, QueueActionAdvance:
		return true
	}
	return false
}

func (e QueueAction) String() string {
	return string(e)
}

func (e *QueueAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QueueAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QueueAction", str)
	}
	return nil
}

func (e QueueAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SongVoteAction string

const (
	SongVoteActionAdd    SongVoteAction = "ADD"
	SongVoteActionRemove SongVoteAction = "REMOVE"
)

var AllSongVoteAction = []SongVoteAction{
	SongVoteActionAdd,
	SongVoteActionRemove,
}

func (e SongVoteAction) IsValid() bool {
	switch e {
	case SongVoteActionAdd, SongVoteActionRemove:
		return true
	}
	return false
}

func (e SongVoteAction) String() string {
	return string(e)
}

func (e *SongVoteAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SongVoteAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SongVoteAction", str)
	}
	return nil
}

func (e SongVoteAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SongVoteDirection string

const (
	SongVoteDirectionUp   SongVoteDirection = "UP"
	SongVoteDirectionDown SongVoteDirection = "DOWN"
)

var AllSongVoteDirection = []SongVoteDirection{
	SongVoteDirectionUp,
	SongVoteDirectionDown,
}

func (e SongVoteDirection) IsValid() bool {
	switch e {
	case SongVoteDirectionUp, SongVoteDirectionDown:
		return true
	}
	return false
}

func (e SongVoteDirection) String() string {
	return string(e)
}

func (e *SongVoteDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SongVoteDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SongVoteDirection", str)
	}
	return nil
}

func (e SongVoteDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
