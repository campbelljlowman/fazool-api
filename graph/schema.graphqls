# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type SimpleSong {
  id:     String!
  title:  String!
  artist: String!
  image:  String!
}

type QueuedSong {
  simpleSong: SimpleSong!
  votes:      Int!
}

type CurrentlyPlayingSong {
  simpleSong:           SimpleSong!
  isPlaying:            Boolean!
  songProgressSeconds:  Int!
  songDurationSeconds:  Int!
}

type SessionState {
  currentlyPlaying: CurrentlyPlayingSong
  queue:            [QueuedSong!]
  numberOfVoters:   Int!
}

type SessionConfig {
  sessionID:      Int!
  adminAccountID: Int!
  maximumVoters:  Int!
}

type Account {
  id:             Int!
  firstName:      String
  lastName:       String
  email:          String
  activeSession:  Int
}

type Voter {
  id:             String!
  type:           VoterType!
  songsUpVoted:   [String!]
  songsDownVoted: [String!]
  bonusVotes:     Int
}

type Playlist {
  id:     String!
  name:   String!
  image:  String!
}

enum QueueAction {
  PLAY
  PAUSE
  ADVANCE
}

enum SongVoteDirection {
  UP
  DOWN
}

enum SongVoteAction {
  ADD
  REMOVE
}

enum VoterType {
  FREE
  PRIVILEGED
  ADMIN
}

enum AccountType {
  FREE
  SMALL_VENUE
  LARGE_VENUE
}

input SongUpdate {
  id:     String!
  title:  String
  artist: String
  image:  String
  vote:   SongVoteDirection!
  action: SongVoteAction!
}

input NewAccount {
  firstName:  String!
  lastName:   String!
  email:      String!
  password:   String!
}

input AccountLogin {
  email:    String!
  password: String!
}

input SpotifyCreds {
  accessToken:  String!
  refreshToken: String!
}

type Query {
  sessionConfig(sessionID: Int!): SessionConfig!
  sessionState(sessionID: Int!): SessionState!
  voter(sessionID: Int!): Voter!
  voterToken: String!
  account: Account!
  playlists(sessionID: Int!): [Playlist!]
  musicSearch(sessionID: Int!, query: String!): [SimpleSong!]
}

type Mutation {
  createSession: Account!
  createAccount(newAccount: NewAccount!): String!

  updateQueue(sessionID: Int!, song: SongUpdate!): SessionState!
  updateCurrentlyPlaying(sessionID: Int!, action: QueueAction!): SessionState!
  upsertSpotifyToken(spotifyCreds: SpotifyCreds!): Account!
  setPlaylist(sessionID: Int!, playlist: String!): SessionState!
  setVoterType(targetAccountID: Int!, voterType: VoterType!): Account!
  setAccountType(targetAccountID: Int!, accountType: AccountType!): Account!
  addBonusVotes(targetAccountID: Int!, bonusVotes: Int!): Account!


  login(accountLogin: AccountLogin!): String!

  endSession(sessionID: Int!): String!
  deleteAccount(targetAccountID: Int!): String!
}

type Subscription {
  subscribeSessionState(sessionID: Int!): SessionState!
}