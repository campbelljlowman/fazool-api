# GraphQL schema example
#
# https://gqlgen.com/getting-started/
directive @hasVoterID on FIELD_DEFINITION
directive @hasAccountID on FIELD_DEFINITION


type SimpleSong {
  id:     String!
  title:  String!
  artist: String!
  image:  String!
}

type QueuedSong {
  simpleSong: SimpleSong!
  votes:      Int!
}

type CurrentlyPlayingSong {
  simpleSong:           SimpleSong!
  isPlaying:            Boolean!
  songProgressSeconds:  Int!
  songDurationSeconds:  Int!
}

type SessionState {
  currentlyPlaying: CurrentlyPlayingSong!
  queue:            [QueuedSong!]
  numberOfVoters:   Int!
}

type SessionConfig {
  sessionID:      Int!
  adminAccountID: Int!
  maximumVoters:  Int!
}

type Account {
  id:               Int!
  firstName:        String!
  lastName:         String!
  email:            String
  activeSession:    Int
  streamingService: StreamingService
  fazoolTokens:     Int
}

type Voter {
  id:             String!
  accountID:      Int!
  type:           VoterType!
  songsUpVoted:   [String!]
  songsDownVoted: [String!]
  bonusVotes:     Int
}

type Playlist {
  id:     String!
  name:   String!
  image:  String!
}

enum StreamingService {
  NONE
  SPOTIFY
}

enum QueueAction {
  PLAY
  PAUSE
  ADVANCE
}

enum SongVoteDirection {
  UP
  DOWN
}

enum SongVoteAction {
  ADD
  REMOVE
}

enum VoterType {
  FREE
  SUPER
  ADMIN
}

enum AccountType {
  FREE
  SMALL_VENUE
  LARGE_VENUE
}

enum BonusVoteAmount {
  TEN
  TWENTY_FIVE
  FIFTY
}

enum FazoolTokenAmount {
  FIVE
  TEN
  TWENTY_TWO
}

input SongUpdate {
  id:     String!
  title:  String
  artist: String
  image:  String
  vote:   SongVoteDirection!
  action: SongVoteAction!
}

input NewAccount {
  firstName:    String!
  lastName:     String!
  phoneNumber:  String!
  email:        String!
  password:     String!
}

input AccountLogin {
  email:    String!
  password: String!
}

type Query {
  sessionConfig(sessionID: Int!): SessionConfig! @hasVoterID
  sessionState(sessionID: Int!): SessionState! @hasVoterID
  voter(sessionID: Int!): Voter! @hasVoterID
  voterToken(sessionID: Int!): String!
  account: Account! @hasAccountID
  playlists(sessionID: Int!): [Playlist!] @hasAccountID
  musicSearch(sessionID: Int!, query: String!): [SimpleSong!] @hasVoterID
}

type Mutation {
  createSession: Account! @hasAccountID
  createAccount(newAccount: NewAccount!): String!

  updateQueue(sessionID: Int!, song: SongUpdate!): SessionState!  @hasVoterID
  updateCurrentlyPlaying(sessionID: Int!, action: QueueAction!): SessionState! @hasAccountID
  setSpotifyStreamingService(spotifyRefreshToken: String!): Account! @hasAccountID
  setPlaylist(sessionID: Int!, playlistID: String!): SessionState! @hasAccountID
  setAccountType(targetAccountID: Int!, accountType: AccountType!): Account! @hasAccountID
  setSuperVoterSession(sessionID: Int!, targetAccountID: Int!): Account! @hasVoterID @hasAccountID
  addBonusVotes(sessionID: Int!, targetAccountID: Int!, bonusVoteAmount: BonusVoteAmount!): Account! @hasVoterID @hasAccountID
  addFazoolTokens(sessionID: Int!, targetAccountID: Int!, fazoolTokenAmount: FazoolTokenAmount!): String! @hasAccountID
  createPasswordChangeRequest(email: String!): String!
  changePassword(passwordChangeRequestID: String!, newPassword: String!): Account!

  login(accountLogin: AccountLogin!): String!

  endSession(sessionID: Int!): String! @hasAccountID
  removeSongFromQueue(sessionID: Int!, songID: String!): SessionState! @hasAccountID
  removeSpotifyStreamingService(targetAccountID: Int!): Account! @hasAccountID
  deleteAccount(targetAccountID: Int!): String! @hasAccountID
}

type Subscription {
  subscribeSessionState(sessionID: Int!): SessionState! @hasVoterID
}